from telebot import *
from tokens import TELE_TOKEN
from import_game import data, app_filter
from special_symbols import sp_symbols
from tag import tags

bot = telebot.TeleBot(TELE_TOKEN)


@bot.message_handler(commands=['start'])
def start(message: telebot.types.Message):
    markup = types.ReplyKeyboardMarkup()
    btn1 = types.KeyboardButton('–í—Å–µ –∏–≥—Ä—ã')
    btn2 = types.KeyboardButton('–ò—Ä—ã –ø–æ —Ç—ç–≥–∞–º')
    markup.row(btn1, btn2)
    bot.send_message(message.chat.id,
                     f'–ü—Ä–∏–≤–µ—Ç, *{sp_symbols(message.from_user.first_name)}*, —è –∑–Ω–∞—é {len(data)} –∏–≥—Ä—ã\n\n'
                     f'–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–í–°–ï –ò–ì–†–´" –∏ —è –ø–æ–∫–∞–∂—É –∫–∞–∫–∏–µ –∏–≥—Ä—ã —è –∑–Ω–∞—é\n\n'
                     f'–ò–ª–∏ –∂–µ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ò–ì–†–´ –ü–û –¢–≠–ì–ê–ú" –∏ —è –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É—é –∏–≥—Ä—ã –¥–ª—è —Ç–≤–æ–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞\n\n'
                     f'–Ø –æ–±—É—á–∞—é—Å—å, –ø–æ—ç—Ç–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –±—É–¥–µ—Ç —Ä–∞—Å—Ç–∏, –¥–∞ –∏ —è –±—É–¥—É –º–µ–Ω—è—Ç—å—Å—è üòâ',
                     parse_mode='MarkdownV2',
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    if callback.data in tags:
        games = app_filter('A-z', callback.data)
        num_game = len(games)
        n_max = 0
        while True:
            markup = types.InlineKeyboardMarkup()
            for game in games[n_max::]:
                markup.add(types.InlineKeyboardButton(game, callback_data=game))
            if num_game - n_max > 100:
                bot.send_message(callback.message.chat.id,
                                 f'–ò–≥—Ä—ã –ø–æ —Ç—ç–≥—É "{callback.data}" {n_max + 1} - {n_max + 100}', parse_mode='html',
                                 reply_markup=markup)
            else:
                bot.send_message(callback.message.chat.id,
                                 f'–ò–≥—Ä—ã –ø–æ —Ç—ç–≥—É "{callback.data}" {n_max + 1} - {n_max + num_game % 100}',
                                 parse_mode='html',
                                 reply_markup=markup)
            n_max += 100
            if n_max >= num_game:
                break
    else:
        for game in data:
            if game['name'] == callback.data:
                bot.send_message(callback.message.chat.id,
                                 f'*{sp_symbols(callback.data)}*\n\n{sp_symbols(game["description"])}',
                                 parse_mode='MarkdownV2')


@bot.message_handler(content_types=['text', ])
def type_sort(message: telebot.types.Message):
    if message.text == '–í—Å–µ –∏–≥—Ä—ã':
        games = app_filter('A-z')
        num_game = len(games)
        n_max = 0
        while True:
            markup = types.InlineKeyboardMarkup()
            for game in games[n_max::]:
                markup.add(types.InlineKeyboardButton(game, callback_data=game))
            if num_game - n_max > 100:
                bot.send_message(message.chat.id, f'{message.text} {n_max + 1} - {n_max + 100}',
                                 parse_mode='html', reply_markup=markup)
            else:
                bot.send_message(message.chat.id, f'{message.text} {n_max + 1} - {n_max + num_game % 100}',
                                 parse_mode='html', reply_markup=markup)
            n_max += 100
            if n_max >= num_game:
                break


    elif message.text == '–ò—Ä—ã –ø–æ —Ç—ç–≥–∞–º':
        markup = types.InlineKeyboardMarkup()
        for tag in tags:
            markup.add(types.InlineKeyboardButton(tag, callback_data=tag))
        bot.send_message(message.chat.id, f'–Ø –∑–Ω–∞—é –≤–æ—Ç —ç—Ç–∏ —Ç—ç–≥–∏:',
                         parse_mode='html', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, f'–Ø –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –Ω–∞ —ç—Ç–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å, –Ω–æ —è –≤—Å–µ –µ—â–µ —É—á—É—Å—å')


bot.polling()
